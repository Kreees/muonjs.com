h3.title Окружение
p
    | Прежде чем начать обсуждение особенностей самой библиотеки, следует обозначить среду обитания и ограничения, в которых
    |  мы будем вынуждены существовать. Это в первую очередь касается операционной системы, и сопутствующих фреймворку
    |  языка программирования, его интерпретатора и используемой базы данных.
h4.title#lang Язык программирования
p
    | Выбор языка всегда был одним их самых животрепещущих вопросов для большинства программистов,
    |  способных вызывать бурные споры на форумах и в комментариях блогов и хабра.
    |  Очевидно, что выбор языка при создании фреймворка имеет первостепенное
    |  значение. Язык во многом задает тон и стиль, в котором будет вестись разработка как самого фреймворка, так и приложений
    |  на его основе. От него зависит аудитория разработчиков, так как у любого языка всегда были, есть и будут и фаны, и
    |  ненавистники. Но, что самое важное, язык определяет будущую экосистему фреймворка в виде сторонних библиотек,
    |  модулей и методов их распространения, сообщества, документации и т.д. (в этом смысле пример
    a(href="http://ru.wikipedia.org/wiki/Ruby_on_rails")  Ruby on Rails
    |  - показателен).
    |  Если же рассматривать проблему выбора относительно конечного разработчика, то, думаю, тут большинство опытных программистов
    |  со мной согласится, в каждом отдельном случае выбор языка - это дело вкуса (или привычки) и целесообразности.
p
    | Если не брать в расчет вкусовщину, из-за которой до сих пор нередко вознкают холивары, то в сухом остатке получим, что
    |  к основным критериям при выборе языка следует отнести его окружение или экосистему, а также пригодность  для решения
    |  поставленной задачи.
p
    | Уже из названия библиотеки понятно, что программировать мы будет на
    b  JavaScript
    | 'е. Я не буду сравнивать его здесь с другими языками программирования, в Интернете существует немало ресурсов
    |  посвященных данному вопросу. Сразу отмечу, что в случае с одностраничными сайтами мы на ряду с серверным
    |  программированием будем иметь полноценное
    b  клиентское
    |  программирование. Более того объем клиентского JavaScript'а
    |  будет едва ли не больше кода на сервере. Объясняется это главным обазом тем, что подавляющую часть кода сервера,
    |  мы постараемся привести к паттернам, в то время как вся бизнес-логика Вашего приложения будет вынесена в
    |  толстый клиент. Более подробно это будет освещено в следующих главах.
p
    | Когда-то при создании Rails разработчики попытались определить единый и универсальный язык программирования, который
    |  использовался бы для разрботки как на стороне сервера, так и на стороне клиента, а также в процессе верстки.
    |  В R'o'R этим языком является, само собой, Ruby. Саму по себе идею единого языка, я считаю весьма неплохой, но
    |  (являясь фанатом JS =) в реализации Rails вижу определенные изъяны. Ключевая проблема здесь, как мне кажется, кроется
    |  в попытке заменить естественный для браузера JS на набор хэлперов, написанных на Ruby, решающих, как правило, шаблонные
    |  задачи. К счастью, время, когда JavaScript отвечал за банальное "всплытие менюшек" уже давно прошло, и сейчас JS - это
    |  полносильный язык программирования, весьма удачно подходящий для решения сложных асинхронных задач, к коим относятся взаимодействие
    |  c пользователем и сетью. В тоже время, JavaScript уже не первый год благодаря
    a(href='http://nodejs.org',target='new')  Node.js
    |  успешно эксплуатируется на сервере. Таким образом, если опустить некоторое количество нюансов, о которых мы поговорим
    |  позже, JavaScript может оказаться неплохим кандидатом на роль "того самого" языка.
p
    | На самом деле я неспроста упомянул Ruby on Rails - объективно, это один из самых успешных и эффективных веб-фреймворков
    |  из тех, что были созданы за все время, и по этой причине я периодически буду на него
    |  ссылаться. Сразу скажу, что для любителей Ruby-like синтаксиса есть возможность использовать вместо JS код на&nbsp;
    a(href='http://coffeescript.org/',target='new') CoffeeScript
    | , к которому я сам периодически прибегаю, так как он в значительной степени способствует написанию "правильного"
    |  кода и имеет множество различных синтаксических "пряников". Помимо самого кода, также как и в других фреймворках,
    |  нам придется создавть HTML-шаблоны, отвечающие за динамическое отображение данных на стороне клиента. Для этих
    |  целей в настоящий момент существует значительное число языков-шаблонизаторов. Однако, особое внимание я уделю языку&nbsp;
    a(href='http://jade-lang.com/',target='new') Jade
    | , который был создан по аналогии с языком HAML, используемом в Rails.
p
    | Собственно, на этом обзор инструмента, с помощью которого мы будем творить, я закончу. Уверен, что
    |  львиная доля читателей данного туториала имеет достаточно хорошее представление о данном языке и его особенностях.
    |  В том случае же, если Вы не знаете JavaScript, то я настоятельно рекомендую Вам обратиться к соответствующей литературе
    |  (например, к&nbsp;
    a(href='http://www.ozon.ru/context/detail/id/6118760/') этой
    | ) и/или материалам в Интернете, среди которых особено рекомендую замечательный сайт&nbsp;
    a(href='http://w3schools.com') W3Schools
h4.title#interpreter Интерпретатор
p
    | Итак, мы обозначили, что основным языком программирования для нас будет JavaScript, и в роли его интерпретатора,
    |  а по совместительству и веб-сервера выступает Node.js.

h4.title#os Операционная система
p
    | В общем случае выбор ОС, под которой будет вестись работа, - это личное дело каждого разработчика. Для случая с
    |  JavaScript и Node.js (да и для большинства других сред), всегда существует возможность установить интерпретатор
    |  и все сопутствующие программы и библиотеки через подготовленные инсталяторы и архивы, которые вы можете скачать на
    |  сайтах проекта (об этом далее). Каких либо существенных различий в разработке под Windows, Mac или Linux с точки зрения
    |  Node.js API и дополнительных модулей мне не известно. Исключение составляют лишь модули, которые имеют непосредственную
    |  зависимость от сторонних программ (например,&nbsp;
    a(href='https://github.com/hacksparrow/node-easyimage',target='new') EasyImage
    |  - модуль работы и изображениями). Таким образом особо значимых объективных приоритетов ни у одной из платформ я не вижу.
p
    | Мои личные пристрастия и опыт склоняют меня в сторону Linux и Mac, так как в моем понимании данные платформы в значительной
    |  степени ориентированы на разработку, нежели Windows (одна консоль чего стоит). Помимо этого, во многих случаях намного проще
    |  (привычнее) запускать и контроллировать демонизированные процессы классическими nix-средствами.
    |  Сразу оговорюсь, в данном случае я говорю о выборе ОС с точки зрения разработки, а не запуска веб-проекта
    |  в production mode - этой теме будет посвещена отдельная глава туториала. Здесь и далее я буду предполагать, что
    |  разработка ведется под ОС Ubuntu Linux 12.04 или новее. Для случая с MacOS все действия, связанные с управлением проекта, должны протекать полностью
    |  идентично Linux. Если же вы выбрали ОС Windows, то при возникновении каких либо трудностей, с большой долей
    |  вероятности вам поможет волшебная связка&nbsp;
    a(href='http://google.com',target='new') Google
    | &nbsp;->&nbsp;
    a(href='http://stackoverflow.com',target='new') StackOverflow.
h4.title#db База данных
p
    | В качестве базы данных в рамках данного проекта мы будем использовать MongoDB, и я объясню почему.
    |  Очевидно, база данных является самым распространенным способом хранить данные проекта. Все фреймворки, с
    |  которыми мне доводилось встречаться, используют ORM (Object-Relational Model), позволяющий прозрачно
    |  менять представление данных с табличного (в данном случае мы говорим об SQL-базах) в более естественное для разрботки
    |  - объектное с корректной типизацией. При этом ORM-прослойка, как правило, выполняет целый комплекс задач, по настройке
    |  индексации, реализации автоматического связывания таблиц для зависимых моделей данных и т.д.
    |  Когда я начинал работу над Muon.js, я не ставил перед собой цели обеспечить полноценную и всестороннюю работу по
    |  хранению и выборке данных, на какую способны многие современные СУБД. Главным приоритетом при выборе БД
    |  была возможность с минимальными затратами обеспечить хранение данных в объектной форме.
    |  В этом смысле использование NoSQL базы я считаю весьма эффективным и невероятно гибким решением.
p Главным преимуществом работы с MongoDB я вижу возможность на лету менять конфигрукцию (структуру данных) без необходимости
    |  выполнения миграций, что значительно экономит время и нервы, когда Вы еще не готовы дать подоброное описание
    |  моделям данных, с которыми собираетесь работать, и хотите составить макет поекта. В дальнейшем вы увидете,
    |  насколько это свойство упрощает процесс разработки API Вашего проекта.
p Безусловно у NoSQL баз есть свои недостатки. Одним из наиболее значимых является сложность выполнения многоуровневых выборок,
    |  которые в SQL базах разрешаются обычным вложенным "селектом", что приводит к необходимости выполнять несколько запросов
    |  на выборку и значительно снижает производительность сервера. Решается данная проблема либо уходом в SQL, либо использованием
    |  процедур на стороне сервера базы данных. Более подробно данный вопрос будет освещен в соответствующих главах.
h4.title#ide Интегрированная среда разработки
p
    | Несомненно, для многих начинающих программистов выбор IDE является одним из краеугольных вопросов. Это неудивительно,
    |  так как именно удобство разработки формирует общее впечатление о данном процессее, помогает с его организацией,
    |  часто упрощает работу с системами контроля версий и т.д. Разработка конечно же может вестись абсолютно любыми
    |  средствами, включая стандартный блокнот и консоль. Достаточно часто мне лично приходится прибегать к работе с
    |  файлами проекта на удаленном сервере через SSH соединение в консоли под&nbsp;
    a(href='http://www.vim.org/',target='new') Vim
    | , что совсвем неплохо, когда ты знаком с системой комманд данного редактора.
p Среди существующих развитых IDE могу порекомендовать&nbsp;
    a(href='http://aptana.com',target='new') Aptana
    | , которая является полностью бесплатной и имеет огромный перечень расширений, доступных ей по наследству от Eclipse.
    |  Ко всему, когда речь зайдет о разработке под мобильные устройства, мы будем пользоваться Titanium IDE, специальной
    |  платформе, созаднной&nbsp;
    a(href='http://appcelerator.com',target='new') Appcelerator Network
    | , которая является модернизированной версией Aptana IDE и имеет аналогичный интерфейс.
p Сам я отдаю предпочтение продуктам компании&nbsp;
    a(href='http://jetbrains.com',target='new') JetBrains
    |  и в частности &nbsp;
    a(href='http://www.jetbrains.com/webstorm/',target='new') WebStorm
    | , который в значительной степени ориентирован на веб-разработку на JavaScript, имеет хорошую поддержку современных языков,
    |  в том числе CoffeeScript и Jade, о которых говорилось выше, а также поддерживает систему встроенного докумнтирования
    |  JSDoc, которой будет посвящена отдельная глава туториала. WebStorm является коммерческим продуктом, однако вы можете
    |  воспользоваться 30-ти дневным пробным периодом. Так же на сайте доступны разные способы (и скидки) приобритения
    |  лицензии.
h4.title#browser Браузер
p
    | Браузер является неотъемлемым инструментом разработки в любом веб-проекте. Как я уже говорил, значительная доля написанного
    |  нами кода будет выполняться в контексте браузера, поэтому нам понадобятся средства для инспекции и отладки JS кода
    |  на стороне клиента. Сегодня все наиболее популярные браузеры имеют встроенную веб-консоль, что позволяет отслеживать
    |  вознкающие ошибки и исполнять произвольный код на стороне клиента. Вы можете использовать любой привычный и удобный
    |  для Вас браузер. Я в свою очередь все дальнейшие действия буду описать в рамках браузеров Google Chrome и Google
    |  Chromium.
h4 Установка и настройка окружения.
h5.title#node Node.JS и NPM
p
    | Node.js доступен среди готовых пакетов репозиториев Ubuntu. Однако, к моменту написания данной главы пакет <b>nodejs</b>
    |  имеел версию 0.6.19, в то время как на официальном сайте доступны <a href='http://nodejs.org/download/' target='new')>архивы</a>
    |  с бинарными файлами версии 0.10.17.
    |  Я настоятельно рекомендую использовать последние версии Node.js, так как по мере развития данного проекта
    |  утверждается и стабилизируется его <a href='http://nodejs.org/api/' target='new'>API</a>
    | . Также у Node.js существуют проблемы с утечкой памяти. Можно ожидать,
    |  что с новыми релизами эта, а также другие существующие проблемы будут частично или полностью устранены.
p
    | Настройку Node.js мы будем вести в "кустарном" режиме, храня все необходимые бинарные файлы в своей домашней директории.
    |  В зависимости от ваших предпочтений, вы можете использовать для размещения пакетов директорию
    b  /opt
    | , либо же раскидать необходимые исполняемые файлы в директории
    b  /usr/local/bin
    | . В этом случае вам необходимо будет позаботиться о правах создания, записи и чтения файлов из данных директорий.
div.code
    span foo:~$ mkdir opt && cd ./opt
    br
    span foo:~/opt$ wget http://nodejs.org/dist/v0.10.17/node-v0.10.17-linux-x86.tar.gz
    br
    span foo:~/opt$ tar xzf node-v0.10.17-linux-x86.tar.gz
    br
    span foo:~/opt$ ln -s node-v0.10.17-linux-x86 node
p Все обращения к Node.js будут вестись по ссылке с универсальным именем, так как в дальнейшем это упростит процесс перехода на
    |  новую версию интерпретатора - достаточно будет распаковать архив с очередной версией и заместить старую ссылку на новую.
p Для удобства я советую добавить путь к исполняемым файлам Node.js в переменную
    b  $PATH
    | , чтобы в дальнейшем упростить вызов
    |  интерпретатора или менеджера пакетов. В случае, если вы используете
    b  bash
    | , вам следует выполнить следующую команду:
div.code
    span bash:~$ echo "PATH=$PATH:$HOME/opt/node/bin" >> ~/.bashrc
p С этого момента команды
    b  node
    |  и
    b  npm
    |  будут доступны для непосредственного вызова из терминала.
p Еще немного о программе npm. Приложение
    b  NPM
    |  входящее в состав проекта Node.js предназначено для публикации и распространения пакетов, через&nbsp;
    a(href='https://npmjs.org/',target='new') реестр
    | . NPM позволяет установить в текущем проекте все необходимые локальные зависимости и использовать их в своем исходном
    |  коде в соотствии с технологией&nbsp;
    a(href='http://en.wikipedia.org/wiki/CommonJS',target='new') CommonJS
    |  через метод
    b  require
    | . Помимо этого NPM позволяет устанавливать зависимости глобально в рамках всей операционной системы. При этом, несмотря на
    |  фразу "глобальная установка", пакеты, установленные с опцией&nbsp;
    b -g
    | , не могут быть доступны в проектах через require. Данная опция, как правило, используются для распространения исполняемых файлов,
    |  которые могут быть включены в состав пакета, а также документации (в виде man-страниц). В некотором смысле
    |  это похоже на установку програмного обеспечения через систему пакетов, таких как APT. Более подробно о различиях
    |  между глобальной и локальной установкой пакетов NPM вы можете почитать в
    a(href='http://blog.nodejs.org/2011/03/23/npm-1-0-global-vs-local-installation/',target='new')  этом
    |  блоге.
h5.title#mongo MongoDB
p
    | Для установки MongoDB на вашей рабочей машине вы можете либо воспользоваться существующими пакетами, доступными
    |  в APT репозитории Ubuntu, либо загрузить прекомпилированный архив и установить все вручную.
p
    | Установка приложения через apt-get
    |  не составляет проблем, поэтому ниже я опишу только процесс установки и
    |  минимальной настройки демона MongoDB в ручную. Архив с бинарными файлами доступен на странице&nbsp;
    a(href='http://www.mongodb.org/downloads',target='new') официального сайта
    |  проекта. Выбрав нужную версию базы вы можете сохранить и распокавать архив на локальном диске.
div.code
    span foo:~$ cd ~/opt
    br
    span foo:~/opt$ wget http://downloads.mongodb.org/linux/mongodb-linux-x86_64-2.4.6.tgz
    br
    span foo:~/opt$ tar zxf mongodb-linux-x86_64-2.4.6.tgz
    br
    span foo:~/opt$ ln -s mongodb-linux-x86_64-2.4.6 mongo
p
    | При создании базы необходимо создать директории, в которых будут храниться непосредственно файлы базы,
    |  а также файлы с log-данными и файл конфигурации.
div.code
    span foo:~/opt$ cd mongo
    br
    span foo:~/opt/mongo$ mkdir data
    br
    span foo:~/opt/mongo$ touch mongo.cfg
    br
p Файл
    b  mongo.cfg
    |  должен быть примерно следующего содержания:
div.code.light
    span dbpath=/home/vasya_pupkin/opt/mongo/data
    br
    span logpath=/home/vasya_pupkin/opt/mongo.log
    br
    span logappend=true
    br
    span journal=true
    br
    span verbose=true
    br
    span port=28017
    br
    span fork=true
p С этого момента сервер базы данных может быть запущен:
div.code
    span foo:~/opt/mongo$ bin/mongod --config=mongo.cfg
    br
    span about to fork child process, waiting until server is ready for connections.
    br
    span forked process: 5483
    br
    span all output going to: /home/vasya_pupkin/opt/mongo.log
    br
    span child process started successfully, parent exiting
    br
    br
    span foo:~/opt/mongo$ bin/mongo
    br
    span MongoDB shell version: 2.4.6
    br
    span connecting to: test
    br
    span Welcome to the MongoDB shell.
    br
    span For interactive help, type "help".
    br
    span For more comprehensive documentation, see
    br
    span http://docs.mongodb.org/
    br
    span Questions? Try the support group
    br
    span http://groups.google.com/group/mongodb-user
    br
    span >
p В том случае, если при запуске у вас возникли какие либо ошибки, подбробную информацию о них вы сможете найти
    |  в соответствующем log-файле
    b  ~/opt/mongo.log
    | .
p Дополнительную информацию об установке и настройке базы данных вы можете найти в официальном&nbsp;
    a(href='http://docs.mongodb.org/manual/installation/',target='new') мануале
div.mark
    h5 Примечание
    p
        | В данной главе я не рассматриваю вопросы защиты базы от несанкцонированного доступа. Если вы намерены
        |  разместить веб-приложение в Инернете, вам следует позаботиться о дополнительной настройке
        b  mongod
        | , в том числе об аутентификации и привязке к конечному сетевому адресу.
        |  Более подробную информацию вы можете найти на сайте проекта в разделе, посвещенной&nbsp;
        a(href='http://docs.mongodb.org/manual/reference/configuration-options/',target='new') конфигурации сервера
p Для быстрого доступа к исполняемым файлам сервера, также как и в случае с Node.js, я рекомендую добавить путь к директории
    b  mongo/bin
    |  в переменную окружения
    b  $PATH
    | .