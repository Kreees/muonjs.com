h3 Введение в Simgle Page Application
p После того как мы слегка окунились в одностроничное приложение и посмотрели как это все работает, думаю,
    |  следует сделать перерыв и поговорить на тему одностраничек в целом. Я уверен, что большинство более
    |  менее опытных программистов не найдут в этом разделе чего-то принципиально нового, так как идея SPA
    |  уже совсем не нова и мусолилась в Интернете на различных рессурсах не один раз.
p В тоже время я нахожу данный топик достаточно важным по той простой причине, что полноценных качественных одностраничек
    |  в интернете и в рунете в частности еще пока не так немного, и множество технических вопросов здесь остается не решенным
    |  даже на концептуальном уровне.
p Целью всего этого проекта было выражение мыслей о возможных путях решения проблем организации SPA в программном коде библиотеки.
    |  И я нахожу естественным начать обсуждение этих идей с самых общих вопросов, а именно определении, назначении и жизнеспособности одностраничек.
p Если вас мало интересуют общефилософские вопросы веба, то вы можете смело пропустить эту и следующу главы и сразу обратиться к главе <a data-route='/general/deep_sap'>погружение в SPA</a>.
    |  Там вы найдете необходимый набор информации о том как создать веб-приложение с помощью Muon.js. Для всех же остальных - буду рад похоливарить с вами
    |  о судьбе веба в комментариях к данной главе.
h4 О сущности SPA. Проблемы и преимущества.
p  Начну данный раздел с того, что раскрою одну очень важную тайну. JavaScript-программисты не любят верстку и ненавидят DOM.
    |  Никто об этом не знал, даже я до недавнего времени, но это горькая и правда.
    |  Это конечно же шутка, и все же она в некоторой степени имеет отношение к появлению одностраничных приложений.
p В общем случае одностраничное приложение представляет собой насыщенный веб-клиент, который заранее включает в себя все возможные
    |  действия, логические страницы и переходы между ними. Обычно такое приложение заранее формирует весь необходимый контент и помещает его в один большой
    |  <b>index.html</b> файл, а все что по тем или иным причинам не может быть включено в страницу,
    |  догружает по мере общения приложения с пользователем, а также сервером  по средством AJAX-запросов.
    |  При этом организации как клиента, так и сервера для создания одностраничного сайта может быть произвольной.
p Самый банальный пример, когда одностраничный клиент создается на базе обычного
    |  <b>многостраничного</b> сайта, который помещается в специальную оболочку, отслеживающую переходы по внутренним ссылкам. Вместо полноценной перезагрузки браузера, оболочка подгружает
    |  содержимое сайта с сервера, и без обработки отображает его на экране браузера. Это позволяет добиться более "гладкой" визуальной работы сайта и исключить эффект
    |  перезагрузки странциы, когда содержимое сайта на время исчезает (особенно заметно при медленном соединении). Данный метод, например, использует система страниц в <a href='http://jquerymobile.com/' target='new'>jquery-mobile</a>.
p На самом деле преимуществ использования одностраничек значительно больше. Прежде чем рассматривать их более подробно нужно сделать две важные заметки.
    |  Когда говорят об одностраничных приложениях, всегда подразумевают <b>клиент</b> или точнее <b>толстый клиент</b> и его организацию. Из этого следует, что говоря о разработке SPA,
    |  подразумевают в первую очередь именно браузерную часть приложения, не затрагивая при этом особенности работы сервера, полагая, что он работает как обычно, и
    |  единственной его заботой является - отдать цельный файл <b>index.html</b>, а также уметь правильно общаться по <b>AJAX'y</b>. В то же время сама специфика использования
    |  <b>толстого клиента</b> предполагает перенос значительной части бизнес логики приложения с сервера в браузер, что не может не сказаться на программной организации <b>back-end'a</b>.
    |  Здесь и везде в рамках туториала и документации я буду безусловно делать акцент на построении клиента, и тем не менее, я считаю, что значительная часть преимуществ
    |  SPA может быть достигнута в первую очередь за счет оптимизации работы как сервера так и клиента.
p Вторая заметка относится к термину <b>Single Page Application</b> и конкретно к слову <b>application</b> - <b>приложение</b>. Я считаю, что неспроста
    |  данный термин был применен именно к приложениям (хотя наиболее употребим в контексте веб-сайта). Тренд по усложнению и насыщению функциональными возможностями современных веб-сайтов,
    |  приближающий их к уровню настольных приложений, существует уже достаточно давно. Более того, в настоящий момент существует достаточное количество
    |  развитых веб-приложений, которые по удобству использования не уступают современным нативным приложения. В данном случае я говорю о таких
    |  приложениях как сервисы Google, почтовые и картографические приложения Mail и Яндекс, социалки <a target='new' href='http://vk.com'>VK</a> и <a target='new' href='http://fb.com'>Facebook</a>, приложения <a target='new' href='http://asana.com'>Asana</a>,
    |  <a target='new' href='http://lucidcharts.com'>Lucidcharts</a> и т.д. Данный тренд, как мне кажется, будет длиться еще достаточно долго, и еще не скоро мы увидим воплощенный в реалии идеальный мир
    |  Google, когда единственным приложением на компьютере окажется браузер, а все ПО будет размещено в сети на облачных серверах.
    |  Тем не менее сам по себе тренд является очень позитивным и значительно способствует развитию веб-технологий в целом.
    |  В конечном счете основной целью одностраничных приложений является предоставление <b>пользовательского опыта</b>
    |  (юзабилити, user experience) сравнимого с анлогичным для классических <b>настольных приложений</b>. Безусловно в рамках веб-сайта оказывается достаточно
    |  тяжело отойти от присущих ему особенностей, как технических, таких как контекст браузера, так и содержательных (особенности контента).
    |  И все же это не отменяет возможность переноса паттернов пользовательского опыта, сформированных за несколько десятилетий развития настольных приложений,
    |  в плоскость веба. Как факт, удобство пользовательского интерфейса является главным мерилом качества разработанного приложения,
    |  не уступая в этом смысле качеству и адекватности реализации своих фукнций.
p К чему я все это говорю. Мое видение одностраничных приложений, как и в общем цель создания библиотеки Muon.js, сводится не просто к желанию загнать содержимое всего
    |  сайта в один запрос к серверу и тем самым уменьшить время отклика на действия пользователя, а скорее к попытке определить общие принципы построения одностраничного
    |  клиента, организации взаимодействия его внутренних элементов, способов обработки и отображения данных, а также протокола взаимодействия с сервером.
    |  Все это делается ради достижения тех качеств которые выгодно отличают полноценные приложения от обычных сайтов. В частности к ним можно отнести:
ul
    li Перенос бизнес логики приложения за пределы сервера в клиент, при этом каждый экземпляр клиента обладает автономным контекстом.
    li Сервер участвует в формировании и изменении контекста клиента только в тех случаях, когда этого требует логика приложения.
    li Изменение данных контекста приводит к соответствующим автоматическим изменениям в пользовательском интерфейсе приложения.
    li Работа приложения не обязана привязываться к работе сервера, может выполняться в offline-режиме, либо вообще не предполагать наличия удаленного сервера.
    li Сервер в рамках одностраничного приложения выступает в качестве централизованного хранилища данных, а также контроллера, разграничивающего
        |  доступ к данным с различных клиентов
    li В случае, если два и более клиента используют одни и те же ресурсы (данные), синхронизация состояний этих ресурсов должна осуществляться
        |  автоматически в режиме реального времени.
p Сразу сознаюсь, что я во многом лукавлю, называя все выщеперечисленное положительными качествами одностраничек: намного правильнее было бы обозвать все
    |  это <b>требованиями</b> к идеальному веб-приложению. В конечном счете эти требования направлены на достижение двух основных преимуществ: высокая степень
    |  интерактивности приложения и снижение вычислительной нагрузки на сервер. Однако за всем этим скрыто также еще и третье весьма значимое свойство. За счет того, что мы исключаем
    |  сервер из процесса формирования клиента, появляется возможность использования нескольких альтернативных вариантов клиента в рамках одного приложения. Наиболее
    |  характерный пример - это работа приложения в браузере на десктопе, в мобильном браузере, а также в рамках мобильного приложения. Очевидно, что все три перечисленных
    |  формфактора обладают качествами, которые плохо сочетаются друг с другом в рамках одного клиента. Безусловно наличие одностраничного приложения не лишает нас
    |  необходимости разрабатывать три независимых приложения, в тоже время исключение серверной составляющей из бизнес логики приложения позволяет сократить объем
    |  работы как минимум в два раза.
p Очевидно, что наряду с перечисленными достоинствами одностраничных сайтов перед классическими у них есть и свои недостатки. Первая проблема заключается собственно в том,
    |  что все обозначенные свойства приложения нужно в той или иной степени удовлетворить и реализовать. И если для обычных сайтов принципы их построения во многом устоялись
    |  и определены, а для их создания существует достаточное количество "взрослых" фреймворков, то в случае с SPA здесь все оказывается не так просто как хотелось бы.
p Вторая и наиболее существенная составляющая заключается в техническом обеспечении одностраничных приложений со стороны браузеров. Вполне уместно утверждать,
    |  что одностраничные сайты - это история не про старые браузеры. Полноценная поддержка таких функций, как история адресной строки (History), веб-сокеты,
    |  локальные хранилища, а также прочих удобств, которые значительно упрощают процесс создания одностраничных сайтов, есть даже не во всех современных браузерах,
    |  не говоря уже об их мобильных версиях и прочих интернет эксплорерах. Во многом именно это является основным тормозом в развитии веб-приложений, так как
    |  значительная часть коммерческих сайтов ориентирована на максимально широкую аудиторию пользователей, и соответтсвенно должна поддерживать работу старых браузеров.
p К третьей проблеме SPA следует отнести сложность их индексации. Подавляющая часть Интернета до сих пор строится на том, что чтобы получить весь необходимый контент
    |  конкретной страницы веб-сайта, достаточно отправить соответствующий запрос на сервер. Логика работы одностраничного сайта не укладыватся в это правило, так как вне
    |  завиcимости от запроса сервер всегда будет отвечать одним и тем же содержимым, которое с большой долей вероятности не будет включать в себя каких либо данных,
    |  полезных для поискового робота. Очевидно, единственный решением данной проблемы может быть использование дополнительных средств, помогающих поисковым роботам
    |  обойти ограничение SPA, в частности использование системы генерации карт приложения <a href='http://sitemaps.org' target='new'>Sitemap</a>, а также генерация
    |  страниц для поисковых ботов на стороне сервера.
p О том как обойти эти, а также другие ограничения одностраничных приложений вы можете прочитать в соответствующих главах <a data-route='/general/deep_sap'>5-го раздела</a> данного туториала. В целом же
    |  следует сказать, что ни одна из перечисленных проблем не является поводом, чтобы не использовать принцип одностраничных приложений на своем сайте. Более того,
    |  можно ожидать, что со временем в процессе развития как браузеров, так и поисковых систем, все перечисленные выше проблемы сойдут на нет, в то время как достоинства
    |  проявят себя в полную силу. В любом случае, даже сейчас одностраничные приложения имеют право на жизнь, собственно, как раз цель данного туториала и ресурса в целом
    |  и заключается в том, чтобы доказать это.
h4 Толстый клиент vs Service-Side Rendering
h4 Толстый клиент vs Native App
h4 А также сервер