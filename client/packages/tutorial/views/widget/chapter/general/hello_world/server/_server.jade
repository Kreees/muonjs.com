h4.title#server Наполнение сервера
p В общем случае одностраничное приложение может работать без участия удаленного сервера - современные браузеры
    |  для целей хранения данных предоставляют целый ряд средств, таких как работа в оффлайн режиме и кэширование,
    |  поддержка LocalStorage и WebSQL и т.д. Более того, возможен вариант, когда вся логика приложения размещена в
    |  одном единственном HTML файле, его мы рассмотрим, когда будем разбираться с разработкой приложений для мобильных платформ.
    |  И все же, в большинстве случаев ответственность за хранение пользовательских данных на себе несет веб-сервер. В тех
    |  же случаях, когда одни и те же данные должны быть доступны нескольким авторизованным клиентам одновременно,
    |  обойтись без его участия невозможно впринципе.
p В настоящее время существует немало различных серверных фреймворков, позволяющих очень гибко выполнять обработку запросов произвольного
    |  типа и возвращать при этом ответ в произвольном формате, и даже осуществлять асинхронные уведомления
    |  клиентов о происходящих на сервере изменениях в данных (например, с помощью WebSockets). Однако большинство
    |  таких фреймворков рассчитано на классический режим работы сайта, когда подавляющая часть запросов поражадает HTML-ответ и, реже, JSON-данные для AJAX.
    |  Как правило, система маршрутов (предполагаемых пользовательских кейсов) для сайтов, созданных на базе подобных фреймворков, задается на стороне сервера,
    |  что приводит к необходимости активного участия сервера в процессе работы клиента и, как следствие, выполнения
    |  большого количества повторов одних и тех же операций. Для целей поддержки работы одностраничных приложений подобный функцониал во
    |  многом оказывается избыточным. Безусловно, любая серверная библиотека может относительно легко быть адаптирована для работы в
    |  качестве простого API-сервера, который необходим для работы SPA, однако, в большинстве случаев и с высокой вероятностью
    |  средства, представленные подобными фреймворками, окажутся невостребованы и будут выполнять роль баласта, потребляя лишние ресурсы процессора и памяти.
p Серверная составляющая фреймворка Muon предназначена для решения задач, напрямую связанных с особенностями построения одностраничных веб-приложений, и
    |  реализует все инструменты, поддерживающие работу клиентской части библиотеки. В первую очередь к ним относится обработка атомарных запросов, позволяющих
    |  клиенту поддерживать актуальность данных в процессе своей работы. В данной главе мы достаточно поверхностно коснемся базовых возможностей
    |  по управлению данными на стороне сервера. Более подробная информация об организации Muon сервера и его возможностях доступна в соответствующем <a data-route='/server'>туториале</a>.