h5.title#packages Пакеты
p В самом начале, когда я говорил о структуре и организации клиента, я отметил, что одной из наиболее важных задач
    |  в этом вопросе является декомпозиция клиента на составляющие элементы. Исходя из этого я указал решение в виде <strong>виджетов</strong> - элементов интерфейса, из которых,
    |  как из конструктора, формриуется весь клиент. Помимо виджетов (представлений) библиотека Muon поддерживает еще один механизм деления
    |  клиента на составные части. Таким механизмом являются <strong>пакеты</strong>. Суть пакетов сводится к объединению разных виджетов
    |  в группы исходя из их назначения. С точки зрения пользователя сайта (не разработчика) пакет может отвечать за определенный раздел сайта, такой
    |  как адмнистрирование контента, связь посетителя сайта со службой поддержки сервиса/интернет магазина, обработка событий социальных сетей и т.д.
p Для веб-разработчика пакет - это способ упорядочить весь набор виджетов и упростить тем самым работу с ними, а также дополнительная возможность повысить
    |  эффективность коммандной работы над одним проектом. Использование пакетов не являетя обязательным при создании
    |  одностраничного приложения на базе Muon, в тоже время, как только сложность приложения достигнет определенного порога, разработчик автоматически
    |  поймет необходимость создания новых пакетов. По этой причине клиент Muon изначально имеет пакетную структуру и включает в себя
    |  как минимум один пакет, который имеет название <strong>application</strong>.
  p В рамках данного раздела мы не будем создавать новых пакетов, ограничившись лишь исходным пакетом <strong>application</strong>.
    |  Однако из тех соображений, чтобы по мере чтения туториала не возникало слишком много пробелов в понимании работы клиента, а также файловой структуры проекта,
    |  нам придется уделить пакетной системе немного дополнительного внимания.
div.code(style='float: left; width: 230px; margin-right: 20px')
    strong client/
    br
    strong || packages/
    br
    strong |--| application/
    br
    span |----| cache/
    br
    strong |----| dependency/
    br
    span |------| css/
    br
    span |------| js/
    br
    span |------| src/
    br
    strong |----| views/
    br
    span |------| collection/
    br
    span |------| layout/
    br
    span |------| model/
    br
    span |------| stack/
    br
    span |------| widget/
    br
    span |----| tr/
    br
    strong |----| package.js
p Основные моменты в файловой структуре пакета Вам должны быть более менее ясны. В первую очередь пакеты должны размещаться в директории
    |  <strong>/client/packages/</strong> в подпапке, имеющей его название (например, <strong>/client/packages/application</strong>, с которой мы уже имели дело, когда добавляли страницы) и содержащей файл <strong>package.js</strong>, который возвращает
    |  дескриптор пакета. Также Вам уже известна директория <strong>views</strong>, в которой размещается исходный код создаваемых виджетов. Всего в данной
    |  папке может находится до пяти подпапок, имена которых: <strong>collection</strong>, <strong>layout</strong>,
    |  <strong>model</strong>, <strong>stack</strong> и <strong>widget</strong> - соовтетствуют пяти объявленным в библиотеке Muon типам
    |  элементов интерфейса, о которых будет сказано в следующей главе. Также Вам уже известно о существовании папки <strong>application</strong>
    |  в подпке <strong>stack</strong>, которая соответствует представлению <strong>application_stack</strong>, о котором говорилось
    |  в предыдущей главе.
p Структура пакета также включает директории <strong>dependencies/js</strong>, <strong>dependencies/css</strong> и <strong>dependencies/src</strong>,
    |  которые выполняют задачу хранения статичных файлов пакета аналогично тому, как это делает папка <strong>/client/assets</strong> по отношению ко всему приложению.
    |  Директория <strong>tr</strong> предназначена для хранения данных для интернализации приложения, и, в свою очередь, <strong>cache</strong> хранит в себе скомплированный исходный код
    |  пакета в целом, используемый для статичной выгрузки его в браузер в production-режиме. Более подробно о том, как использовать все возможности
    |  пакетов в нашем приложении, мы поговорим в следующих главах.
p Главными задачами, которые решает пакет, являются, как уже говорилось выше, разделение всех виджетов пакета на группы в зависимости от их назначения, а также
    |  формирование разделов на сайте со своей независимой структурой. Как вы уже знаете, дескриптор пакета <strong>package.js</strong> включает в себя маршруты, по которым допустимы
    |  переходы на сайте, а сам пакет также может содержать объявление представления <strong>application_stack</strong> и <strong>страниц</strong>, соответствующих этим маршрутам (см. <a data-route='/general/hello_world/pages'>предыдущую главу</a>).
    |  Помимо этого, пакеты могут ссылаться друг на друга, образую вложенную древовидную структуру маршрутов. Так, например, на данном сайте раздел <a data-hover='.navbar-nav li.active a'>туториал</a>,
    |  который Вы сейчас читаете, заключен в независимый пакет и имеет собственную внутренню систему маршрутов, которая подключена к пакету <strong>application</strong>,
    |  по адресу <strong>/tutor</strong>. Проинспектировав в консоли браузера <a data-hover='[data-muon="index_widget"]'>оглавление</a> данного раздела,
    |  Вы можете увидеть, что все тэги ссылок обладают атрибутом <strong>data-route</strong>, отличающимся от непосредственной ссылки <strong>href</strong>
    |  отсутствием префикса <strong>/tutor</strong>.
p Когда один пакет ссылается на другой, для соответствующего маршрута - точки подключения пакета - автоматически создается пустая страница, единственным дочерним
    |  элементом которой является представление <strong>application_stack</strong> подключаемого пакета. Таким образом струткура приложения получается многоуровневой
    |  и выглядит примерно, как показано ниже:
div.tutor-img
    img(data-src='complex_app_page_struct.png')
p Для того, чтобы указать, что маршрут является точкой входа для другого пакета, переменная <strong>routes</strong>
    |  должна содержать соответствующее указание в виде атрибута <strong>package</strong>
pre.prettyprint.lang-js
    | module.exports = {<br>
    |   routes: [<br>
    |       ...<br>
    |       {<br>
    |               route: "/tutor"<br>
    |               package: "tutorial"<br>
    |      },<br>
    |       ...<br>
    |    }<br>
    | }<br>
p В принципе, это все, что Вам сейчас необходимо знать о пакетах. Файл-дескриптор пакета содержит помимо маршрутов целый ряд
    |  параметров, которые выполняют свою роль в процессе работы библиотеки и помогают в процессе сборки приложения. Более
    |  подробно мы коснемся их в следующих разделах туториала.