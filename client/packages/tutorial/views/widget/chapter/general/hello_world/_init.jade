h4.title#start Инициализация и запуск приложения
p  В качестве Hello, world!
    |  проекта в веб разработке принято брать приложения типа аля'Twitter или планировщики заданий. В рамках этой главы
    |  нам конечно же не удастся создать законченный продукт. Пока я ограничусь тем, что покажу, как инициализировать
    |  проект и создать первые элементы интерфейса. Предлагаю в рамках данного туториала создать календарь с элементами
    |  планировщика заданий. Называться наш проект будет
    strong  SuperCalendar
    | .
p Первым шагом инициализации проекта Node.js является
    |  создание в корневой директории проекта файла
    strong  package.json
    | , в котором дается его описание, включая название, назначение, автора, версию и т.д.
    |  (данная информация нужна главным образом для публикации проекта в&nbsp;
    |  реестре пакетов NPM), а также приводится список зависимостей.
p Для инициализации проекта в библиотеку
    strong  Muon
    |  включена программа
    strong  m-init
    | , которая сама создает и заполняет директорию проекта необходимыми исходными подкаталогами и файлами, в соответствие с требованиями
    |  библиотеки, а также создает заготовку
    strong  package.json
    | .
p Для запуска
    strong  m-init
    |  нам необходимо предварительно выполнить глобальную установку библиотеки
    strong  Muon
    | :
br
pre.prettyprint
    | foo:~$ npm install -g muon
br
div.mark
    h5 Внимание!
    p Если Вы устанавливали Node.js так, как это описано в данном разделе выше, то глобальная установка пакетов не
        |  потребует прав администратора. В том случае, если Вы воспользовались готовым APT пакетом, либо разместили
        |  библиотеку вне домашней директории, то для выполнения данного действия вам возможно потребуются права администратора.
        |  В этом случае команду, указанную выше, вам необходимо выполнить через
        strong  sudo
        | .
    p Из соображений безопасности система
        strong  sudo
        |  в последних версиях дистрибутивов подменяет переменные окружения на стандартные, поэтому команды
        strong  npm
        |  может не оказаться среди директорий, обозначенных в
        strong  $PATH
        | . В этом случае вам необхохдимо будет вызвать npm, указав полный путь до исполняемого файла.
br
p Работа m-init крайне проста. Для инициализации проекта необходимо вызывать программу, передав ей единственный аргумент -
    |  название проекта.
br
pre.prettyprint.lang-sh
    span foo:~$ m-init SuperCalendar
    br
    span ...
    br
    span Complete!
    br
    span foo:~$ cd SuperCalendar
br
p В ходе работы программы будет создана директория, в которую будут скопированы файлы
    strong  шаблонного
    |  проекта. Последним этапом по созданию проекта является установка зависимостей. В файле
    strong  package.json
    |  только что созданного проекта Вы обнаружите, что в число зависимостей добавлен только один модуль
    strong  Muon
    | , который собственно и отвечает за работу всего приложения. Установка зависимостей выполняется с помощью метода
    strong  npm install
    | :
br
pre.prettyprint.lang-sh
    span foo:~/SuperCalendar$ npm install
    br
    span npm http GET https://registry.npmjs.org/Muon
    br
    span npm http 200 https://registry.npmjs.org/Muon
    br
    span ...
br
p Как только npm установит все зависимости, мы сможем запустить приложение. Также как и в большинстве
    |  других Node.js проектов, библиотека включает собственный веб сервер (созданный на базе
    strong  express.js
    |  - подробнее об этом будет рассказано в соответствующей главе). Для запуска приложения достаточно
    |  выполнить встроенную в библиотеку утилиту
    strong  m-start
    | .
br
pre.prettyprint
    span foo:~/SuperCalendar$ m-start
    br
    span Server started in development mode, listening on 0.0.0.0:8000 address.
    br
    span ...
br
p По умолчанию сервер прослушивает адрес 0.0.0.0 на
    |  8000-м порту. Указав в браузере данный адрес, Вы увидете приветственную страницу проекта.
div.tutor-img
    img(data-src='hello_screenshot.png')
p Наш проект готов. В данном случае мы получили заготовку будущего сайта, которую можно и нужно править.