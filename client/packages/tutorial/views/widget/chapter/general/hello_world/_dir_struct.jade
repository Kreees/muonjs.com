h4.title#dir_structure Структура папок проекта
p Просматривая директорию проекта Вы обнаружите приблизительно следующую структуру:
div.code(style='float: left; width: 230px; margin-right: 20px')
    strong client/
    br
    span || assets/
    br
    span |--| ...
    br
    span || packages/
    br
    strong |--| application/
    br
    span |----| ...
    br
    strong |----| views/
    br
    strong |----| package.js
    br
    strong || index.html
    br
    strong server/
    br
    span || app/
    br
    span |--| controllers/
    br
    span |--| initialisers/
    br
    span |--| middleware/
    br
    strong |--| models/
    br
    span |--| helpers/
    br
    span lib/
    br
    span || plugin_loader.js
    br
    span tmp/
    br
    strong config.json
    br
    span package.json
    br
    span README.md
p Если Вы занимались разработкой веб-сайтов на других фреймворках, то заметите ряд общих черт, например, наличие в клиентской части файла
    strong  index.html
    |  и папки
    strong  assets
    |  в которой вполне ожидаемо будут размещаться статичные файлы приложения, в частности CSS- и JS-файлы, изображения,
    |  шрифты и т.д. В серверной части приложения Вы обнаружите набор каталогов, содержащих описание
    strong  моделей
    |  данных и сопутсвующих им JavaScript-модулей.
p Из наиболее превычных можно также выделить файлы
    strong  package.json
    |  и
    strong  README.md
    | .
p Про файл <strong>package.json</strong> я уже писал выше. Он отвечает за описание вашего Node.js проекта, включая внешние зависимости, а также информацию,
    |  необходимую для публикации проекта в реестре NPM. Я не буду сильно заострять внимание на содержимом данного файла, подробную информацию об этом
    |  Вы можете найти <a target='new' src='https://npmjs.org/doc/json.html'>здесь</a>. Некоторые моменты, касающиеся содержания
    |  данного файла, будут отмечаться на протяжении всего туториала. Пока что Вам нужно знать, что единственной обязательной
    |  зависимостью является непосредственно библиотека Muon, что должно быть отражено в переменной
    strong  dependencies
    | .
p Вполне очевидно, что файл <strong>README.md</strong> предназначен для хранения краткого описания вашего проекта. Данный файл будет
    |  автоматически учтен при публикации на github'e и других аналогичных сервисах.
p Помимо данных файлов в корне проекта находится файл
    strong  config.json
    | , который содержит информацию, необходимую для инициализации Muon-проекта. Просматривая содержимое данного файла,
    | , Вы найдете там переменные, хранящие адрес и порт, к которым выполняется привязка веб-сервера, базы данных, стандартную локаль проекта,
    |  а также перечень Muon-плагинов, из которых будет собрано приложение (более подробно о плагинах в структуре Muon-проекта
    |  будет рассказано в разделе туториала, посвященной серверной части библиотеки).
p Оставшиеся неописанные директории - <strong>lib</strong> и <strong>tmp</strong>
    |  - имеют служебное значение. В первой хранится JS-модуль, ответственный за формированние плагинной структуры проекта.
    |  Директория tmp предназначена для размещения временных файлов, а также файлов, загруженных на сервер из Интернета.
p Из представленной структуры видно четкое разделение приложения на <strong>серверную</strong> и <strong>клиентскую</strong> части. В классических фреймворках
    |  с рендерингом старниц на серверной стороне (Rails, Django, Yii), формирование клиента было полностью заботой сервера -
    |  рендеринг страниц осуществлялся с каждым запросом наравне с обращением к базе данных, обработкой данных моделей и т.д.
    |  В одностраничных приложениях сервер безусловно также принимает участие в генерации клиента (далее мы увидим, как это происходит),
    |  однако выгрузка HTML-кода клиента в браузер осуществляется не с каждым запросом, а только один раз при первом запросе (в виде одного большого скомпилированного <strong>index.html</strong> файла).
    |  Далее уже на стороне браузера клиент определяет, какой именно запрос был сделан, и выполняет все сопутствующие ему
    |  действия. Все остальные запросы из загруженного клиента к серверу сводятся (в упрощенном варианте) к выборке данных моделей в JSON виде.
p Из этого описания хорошо видно, как сильно оказываются развязаны клиентская и серверная составляющие приложения. Это
    |  одно из наиболее значимых преимуществ SPA, так как отделив сервер от клиента, у нас появляется возможность менять поведение клиента
    |  и интерфейс, не беспокоясь о вопросах целостности данных, безопасности и&nbsp;т.&nbsp;д. (при этом предполагается, что сервер уже
    |  обеспечивает все эти свойства приложения). Данная особенность в свою очередь упрощает процесс разработки под разные таргетинговые платформы
    |  и аудитории, что безусловно является большим плюсом (более подробно о преимуществах и недостатках одностраничных сайтов мы поговорим в следующих разделах).